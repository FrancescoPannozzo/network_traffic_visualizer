"""
#Setting the command line option to load the network config file and the packets file
parser = argparse.ArgumentParser()
parser.add_argument("networkFile", help="The networkFile you want to load")
parser.add_argument("packetsFile", help="The packetsFile you want to load")
args = parser.parse_args()

#Getting absolute path from the running software directory
current_folder = os.getcwd()
#Abs path plus filename
networkFilePath = current_folder + "\\" + args.networkFile + ".json"
packetsFilePath = current_folder + "\\" + args.packetsFile + ".json"

#testing
print(current_folder + "\\" + args.networkFile + ".json")
print(current_folder + "\\" + args.packetsFile + ".json")

#loading files
networkFile = open(networkFilePath)
packetsFile = open(packetsFilePath)
netWorkData = json.load(networkFile)
packetsDdata = json.load(packetsFile)


SwitchesData = obj.Switch("test", "0.0.0.0", ["1","2"])
print(SwitchesData.ipAddress)
"""

delta = 50
delta2 = time(0,0,0,50000)
oneSec = time(0,0,1)
print(f"timeDelta sec=1: {timedelta(seconds=1)}")
print(f"timeDelta sec=1 / timeDelta ms=50 = {timedelta(seconds=1)/timedelta(milliseconds=delta)}")

print(startTime + timedelta(milliseconds=50))

test =(10 * 1e6)/8
print(test)

""" print(open('names.yaml').read()) """

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


----------------------

class Link:
    cap = 100
    linkIDcounter = 0

    def __init__(self, capacity, endpoints):
      self.capacity = capacity
      self.endpoints = endpoints
      self.trafficPerc = 0
      Link.linkIDcounter += 1
      self.linkId = Link.linkIDcounter

    def getEndpoints(self):
      return self.endpoints

    def __str__(self):
      return f"Link ID:{self.linkId}, endpoints:{self.endpoints}, capacity:{self.capacity}, trafficPercentage:{self.getTrafficPerc()}"
    
    def setCap(self, newCap):
      self.capacity = newCap
    
    def checkEndpoints(self, firstEndpoint, secondEndpoint):
      return firstEndpoint in self.endpoints and secondEndpoint in self.endpoints
    
    def setTrafficPerc(self, trafficPerc):
      self.trafficPerc = trafficPerc

    def getTrafficPerc(self):
      return self.trafficPerc

switches = []

for s in networkData:
  switches.append({
    "switchName": s["switchName"],
    "address": s["address"],
    "connectedTo": s["connectedTo"]
  })

for s in switches:
  print(s)